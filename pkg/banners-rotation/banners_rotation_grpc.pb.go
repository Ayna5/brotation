// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package banners_rotation_pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannersRotationClient is the client API for BannersRotation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannersRotationClient interface {
	AddBannerToSlot(ctx context.Context, in *AddBannerToSlotRequest, opts ...grpc.CallOption) (*AddBannerToSlotResponse, error)
	RemoveBannerFromSlot(ctx context.Context, in *RemoveBannerFromSlotRequest, opts ...grpc.CallOption) (*RemoveBannerFromSlotResponse, error)
	AddClickForBanner(ctx context.Context, in *AddClickForBannerRequest, opts ...grpc.CallOption) (*AddClickForBannerResponse, error)
	GetBannerForSlot(ctx context.Context, in *GetBannerForSlotRequest, opts ...grpc.CallOption) (*GetBannerForSlotResponse, error)
}

type bannersRotationClient struct {
	cc grpc.ClientConnInterface
}

func NewBannersRotationClient(cc grpc.ClientConnInterface) BannersRotationClient {
	return &bannersRotationClient{cc}
}

func (c *bannersRotationClient) AddBannerToSlot(ctx context.Context, in *AddBannerToSlotRequest, opts ...grpc.CallOption) (*AddBannerToSlotResponse, error) {
	out := new(AddBannerToSlotResponse)
	err := c.cc.Invoke(ctx, "/banners.rotation.BannersRotation/AddBannerToSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) RemoveBannerFromSlot(ctx context.Context, in *RemoveBannerFromSlotRequest, opts ...grpc.CallOption) (*RemoveBannerFromSlotResponse, error) {
	out := new(RemoveBannerFromSlotResponse)
	err := c.cc.Invoke(ctx, "/banners.rotation.BannersRotation/RemoveBannerFromSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) AddClickForBanner(ctx context.Context, in *AddClickForBannerRequest, opts ...grpc.CallOption) (*AddClickForBannerResponse, error) {
	out := new(AddClickForBannerResponse)
	err := c.cc.Invoke(ctx, "/banners.rotation.BannersRotation/AddClickForBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) GetBannerForSlot(ctx context.Context, in *GetBannerForSlotRequest, opts ...grpc.CallOption) (*GetBannerForSlotResponse, error) {
	out := new(GetBannerForSlotResponse)
	err := c.cc.Invoke(ctx, "/banners.rotation.BannersRotation/GetBannerForSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannersRotationServer is the server API for BannersRotation service.
// All implementations must embed UnimplementedBannersRotationServer
// for forward compatibility
type BannersRotationServer interface {
	AddBannerToSlot(context.Context, *AddBannerToSlotRequest) (*AddBannerToSlotResponse, error)
	RemoveBannerFromSlot(context.Context, *RemoveBannerFromSlotRequest) (*RemoveBannerFromSlotResponse, error)
	AddClickForBanner(context.Context, *AddClickForBannerRequest) (*AddClickForBannerResponse, error)
	GetBannerForSlot(context.Context, *GetBannerForSlotRequest) (*GetBannerForSlotResponse, error)
}

// UnimplementedBannersRotationServer must be embedded to have forward compatible implementations.
type UnimplementedBannersRotationServer struct {
}

func (UnimplementedBannersRotationServer) AddBannerToSlot(context.Context, *AddBannerToSlotRequest) (*AddBannerToSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerToSlot not implemented")
}
func (UnimplementedBannersRotationServer) RemoveBannerFromSlot(context.Context, *RemoveBannerFromSlotRequest) (*RemoveBannerFromSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBannerFromSlot not implemented")
}
func (UnimplementedBannersRotationServer) AddClickForBanner(context.Context, *AddClickForBannerRequest) (*AddClickForBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClickForBanner not implemented")
}
func (UnimplementedBannersRotationServer) GetBannerForSlot(context.Context, *GetBannerForSlotRequest) (*GetBannerForSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerForSlot not implemented")
}
func (UnimplementedBannersRotationServer) mustEmbedUnimplementedBannersRotationServer() {}

// UnsafeBannersRotationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannersRotationServer will
// result in compilation errors.
type UnsafeBannersRotationServer interface {
	mustEmbedUnimplementedBannersRotationServer()
}

func RegisterBannersRotationServer(s grpc.ServiceRegistrar, srv BannersRotationServer) {
	s.RegisterService(&BannersRotation_ServiceDesc, srv)
}

func _BannersRotation_AddBannerToSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerToSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).AddBannerToSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.rotation.BannersRotation/AddBannerToSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).AddBannerToSlot(ctx, req.(*AddBannerToSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_RemoveBannerFromSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBannerFromSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).RemoveBannerFromSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.rotation.BannersRotation/RemoveBannerFromSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).RemoveBannerFromSlot(ctx, req.(*RemoveBannerFromSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_AddClickForBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClickForBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).AddClickForBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.rotation.BannersRotation/AddClickForBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).AddClickForBanner(ctx, req.(*AddClickForBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_GetBannerForSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannerForSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).GetBannerForSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banners.rotation.BannersRotation/GetBannerForSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).GetBannerForSlot(ctx, req.(*GetBannerForSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannersRotation_ServiceDesc is the grpc.ServiceDesc for BannersRotation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannersRotation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banners.rotation.BannersRotation",
	HandlerType: (*BannersRotationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBannerToSlot",
			Handler:    _BannersRotation_AddBannerToSlot_Handler,
		},
		{
			MethodName: "RemoveBannerFromSlot",
			Handler:    _BannersRotation_RemoveBannerFromSlot_Handler,
		},
		{
			MethodName: "AddClickForBanner",
			Handler:    _BannersRotation_AddClickForBanner_Handler,
		},
		{
			MethodName: "GetBannerForSlot",
			Handler:    _BannersRotation_GetBannerForSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Ayna5/bannersRotation/api/banners-rotation/banners_rotation.proto",
}
